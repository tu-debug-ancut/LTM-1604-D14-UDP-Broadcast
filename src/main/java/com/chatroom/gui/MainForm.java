/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.chatroom.gui;
import com.chatroom.db.DatabaseManager;
import com.chatroom.model.Room;
import com.chatroom.model.User;
import com.chatroom.network.NetworkManager;
import com.chatroom.utils.ThemeUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author chun
 */
public class MainForm extends javax.swing.JFrame {
    private NetworkManager networkManager;
    private DatabaseManager dbManager = new DatabaseManager();
    private Room selectedRoom;
    private Map<String, Room> roomMap = new HashMap<>();
    private Map<String, User> userMap = new HashMap<>();
    private String lastChatLog; 

    /**
     * Creates new form MainForm
     */
    public MainForm(String nickname) {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Chat Room - " + nickname);

        networkManager = new NetworkManager(
            nickname,
            msg -> {
                SwingUtilities.invokeLater(() -> {
                    txtChatArea.append(msg);
                    txtChatArea.setCaretPosition(txtChatArea.getDocument().getLength());
                });
            },
            rooms -> {
                SwingUtilities.invokeLater(() -> {
                    roomMap.clear();
                    DefaultListModel<String> roomModel = new DefaultListModel<>();
                    Set<String> uniqueRooms = new HashSet<>(); 
                    for (Room room : rooms) {
                        if (uniqueRooms.add(room.getName())) { 
                            roomMap.put(room.getName(), room);
                            roomModel.addElement(room.getName());
                        }
                    }
                    listRooms.setModel(roomModel);
                });
            },
            users -> {
                SwingUtilities.invokeLater(() -> {
                    userMap.clear();
                    DefaultListModel<String> userModel = new DefaultListModel<>();
                    Set<String> uniqueUsers = new HashSet<>(); 
                    for (User user : users) {
                        if (uniqueUsers.add(user.getNickname())) { 
                            userMap.put(user.getNickname(), user);
                            userModel.addElement(user.getNickname());
                        }
                    }
                });
            }
        );

        updateRooms();
        updateUsers();

        Timer refreshTimer = new Timer(1000, e -> refreshChatArea());
        refreshTimer.start();

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                networkManager.shutdown();
                refreshTimer.stop(); 
            }
        });
    }

    private void updateRooms() {
        networkManager.roomsCallback.accept(dbManager.getAllRooms());
    }

    private void updateUsers() {
        networkManager.usersCallback.accept(dbManager.getOnlineUsers());
    }

    private void refreshChatArea() {
        if (selectedRoom != null) {
            int roomId = dbManager.getRoomId(selectedRoom.getName());
            String chatLogs = dbManager.getChatLogs(roomId);
            if (!chatLogs.equals(lastChatLog)) {
                SwingUtilities.invokeLater(() -> {
                    txtChatArea.setText(chatLogs);
                    txtChatArea.setCaretPosition(txtChatArea.getDocument().getLength());
                    lastChatLog = chatLogs; 
                });
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listRooms = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtChatArea = new javax.swing.JTextArea();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        btnCreateRoom = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listRooms.setBackground(new java.awt.Color(204, 255, 255));
        listRooms.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        listRooms.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Room" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listRooms.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRoomsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listRooms);

        txtChatArea.setColumns(20);
        txtChatArea.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtChatArea.setRows(5);
        jScrollPane3.setViewportView(txtChatArea);

        btnSend.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnSend.setText("Gửi");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnCreateRoom.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        btnCreateRoom.setText("Tạo phòng");
        btnCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRoomActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        jLabel1.setText("Danh sách nhóm chat:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel4.setText("Nhập nội dung");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel4)
                                .addGap(6, 6, 6)
                                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCreateRoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean updatingRoom = false;
    private void listRoomsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-First:event_listRoomsValueChanged
        if (!evt.getValueIsAdjusting() && !updatingRoom) {
            updatingRoom = true;
            try {
                String selectedName = listRooms.getSelectedValue(); 
                if (selectedName != null) {
                    selectedRoom = roomMap.get(selectedName); 
                    if (selectedRoom != null) {
                        int roomId = dbManager.getRoomId(selectedRoom.getName());
                        String chatLogs = dbManager.getChatLogs(roomId);
                        txtChatArea.setText(chatLogs);
                        lastChatLog = chatLogs; 
                        updateUsers();
                    }
                }
            } finally {
                updatingRoom = false;
            }
        }
    }                                                                       

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (selectedRoom != null && !txtMessage.getText().trim().isEmpty()) {
            String message = txtMessage.getText();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String formattedMessage = networkManager.getNickname() + " (" + sdf.format(new java.util.Date()) + "): " + message + "\n";
            txtChatArea.append(formattedMessage);
            txtChatArea.setCaretPosition(txtChatArea.getDocument().getLength());
            lastChatLog = txtChatArea.getText(); 

            networkManager.sendMessage(selectedRoom, message);
            txtMessage.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a room and enter a message");
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRoomActionPerformed
        CreateRoomDialog frame = new CreateRoomDialog(room -> {
            networkManager.createRoom(room.getName(), room.getMulticastIp(), room.getPort());
            updateRooms();
        });
        frame.setVisible(true);
    }//GEN-LAST:event_btnCreateRoomActionPerformed

    public String getNickname() {
        return networkManager.getNickname();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new LoginForm());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateRoom;
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listRooms;
    private javax.swing.JTextArea txtChatArea;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables
}